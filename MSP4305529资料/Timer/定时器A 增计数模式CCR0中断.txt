#include "driverlib.h"

#define CPU_F ((double)1105920)//CPU主频 MCLK=11.0592MHz
#define delay_us(x) __delay_cycles((long)(CPU_F*(double)x/1000000.0)) //微秒
#define delay_ms(x) __delay_cycles((long)(CPU_F*(double)x/1000.0)) //毫秒

void SystemClock_Init(void)
{
    PMM_setVCore(PMM_CORE_LEVEL_3);     //高主频工作需要较高的核心电压

    //XT1引脚复用
    GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P5, GPIO_PIN4);
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P5, GPIO_PIN5);

    //起振XT1
    UCS_turnOnLFXT1(UCS_XT1_DRIVE_3,UCS_XCAP_3);

    //XT2引脚复用
    GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P5, GPIO_PIN2);
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P5, GPIO_PIN3);

    //起振XT2
    UCS_turnOnXT2(UCS_XT2_DRIVE_4MHZ_8MHZ);

    //XT2作为FLL参考时钟，先8分频，再50倍频 4MHz / 8 * 50 = 25MHz
    UCS_initClockSignal(UCS_FLLREF, UCS_XT2CLK_SELECT, UCS_CLOCK_DIVIDER_8);
    UCS_initFLLSettle(25000, 50);

    //XT1作为ACLK时钟源 = 32768Hz
    UCS_initClockSignal(UCS_ACLK, UCS_XT1CLK_SELECT, UCS_CLOCK_DIVIDER_1);

    //DCOCLK作为MCLK时钟源 = 25MHz
    UCS_initClockSignal(UCS_MCLK, UCS_DCOCLK_SELECT, UCS_CLOCK_DIVIDER_1);

    //DCOCLK作为SMCLK时钟源 = 25MHz
    UCS_initClockSignal(UCS_SMCLK, UCS_DCOCLK_SELECT, UCS_CLOCK_DIVIDER_1);

    //设置外部时钟源的频率，使得在调用UCS_getMCLK, UCS_getSMCLK 或 UCS_getACLK时可得到正确值
    UCS_setExternalClockSource(32768, 4000000);
}

void Timer_A_Init(void)
{
    Timer_A_initUpModeParam htim = {0};
    htim.clockSource = TIMER_A_CLOCKSOURCE_ACLK;    //时钟源选为ACLK = 32768Hz
    htim.clockSourceDivider = TIMER_A_CLOCKSOURCE_DIVIDER_64;   //64分频
    htim.timerPeriod = 512 - 1;                                 //计数值设为512 - 1
    htim.timerInterruptEnable_TAIE = TIMER_A_TAIE_INTERRUPT_DISABLE;
    htim.captureCompareInterruptEnable_CCR0_CCIE = TIMER_A_CCIE_CCR0_INTERRUPT_ENABLE;      //使能CCR0中断
    htim.timerClear = TIMER_A_DO_CLEAR; //把定时器的定时计数器，分频计数器的计数值清零
    htim.startTimer = true;             //初始化后立即启动定时器
    //中断频率=32768Hz / 64 / 512 = 1Hz
    Timer_A_initUpMode(TIMER_A0_BASE, &htim);
    //配置定时器A0为增计数模式
}


int main(void)
{
    WDT_A_hold(WDT_A_BASE);//关闭看门狗
    SystemClock_Init();

    GPIO_setAsOutputPin(GPIO_PORT_P4, GPIO_PIN7);//输出模式
    Timer_A_Init();

    //interrupts enabled
    __bis_SR_register(GIE);//启用可屏蔽中断

    while(1)
    {

    }
}

#pragma vector=TIMER0_A0_VECTOR
__interrupt
void TIMER0_A0_ISR (void)
{
    GPIO_toggleOutputOnPin(GPIO_PORT_P4, GPIO_PIN7);    //翻转P4.7
}